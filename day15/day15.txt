프로그램
	- 실행되지 않은 상태
프로세스
	- 실행된 프로그램 (메모리에 올라가서 동작하는)

쓰레드
	- 비동기식 방식으로 특정 연산을 수행할 때 업무를 효율적으로 처리하기 위해
	짧은 시간안에 다양한 연산들을 마치 동시에 처리하는 것처럼 할 수 있게 하는것.

단일쓰레드
	- 처리 경로를 한 개만 가지고 있기 때문에 직렬적이다.
	- 동시에 많은 양을 처리하기 힘들기 때문에
	 상대적으로 비효율적이다.
	- 하나의 작업에 문제가 발생하더라도 다른 작업에 영향을 끼치지 않아 안정성이 좋다.
	- 설계 시 멀티쓰레드보다 쉽다.

멀티쓰레드
	- 하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서
	차례대로 처리한다.
	- 여러 개의 처리 경로를 가질 수 있도록 하며, 동시에 작업이 가능해진다.
	- 설계하기 굉장히 어려우며, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다.
	- 멀티 쓰레드로 설계했다면, 처리량 증가, 효율성 증가, 처리비용 감소의 장점이 있기 때문에
	단점을 감수하고 설계한다(대표적으로 JAVA언어가 해당된다.)

자바스크립트의 쓰레드(단일 쓰레드)
	- 자바스크립트는 단일 스레드이다. 따라서 자바스크립트는 이벤트 루프를 활용하여
	테스크가 종료되지 않아도 곧바로 실행하는 함수를 처리하는 방식을 도입했다.
	동기는 코드를 순차적으로 읽는 흐름을 의미한다. 하지만 비동기 처리시간이 각각 다르기 때문에
	결과를 예상할 수 없어 결과에 따라 다음 비동기 이후 실행된 동기적 함수를 실행시키기 위하여
	비동기를 동기적으로 처리한다.

동기, 비동기(Synchronized)
	- 동기와 비동기는 다르다 (두 개의 흐름이 다르다)
	- 비동기 안에서도 동기의 흐름이 있다.
	- 비동기는 비동기만의 흐름이 따로 있다.
	- 동기를 비동기로, 비동기를 동기로 바꿔야 합류할 수 있다.

-------------------------------------------------------------------
fetch, axios
fetch(ES6)
	- 기존의 web에서는 비동기 요청을 보내기 위해서 XML, HTTP, REQUEST(XHT)객체를 생성했어야 하나
	이러한 XHR의 요청의 상태나 변경에 따라 개발자의 의도에 맞게 사용하기가 어려워 최적화 되고
	추상화 되어있는 API들이 개발되었다. 그 중 대표적인 API가 fetch와 axios이다.
	단점으로는 데이터 요청 및 응답데이터 수신 시 json 데이터를 받아올 수 없어서 파싱하는 작업이 필요하다
	response.json() : json -> string
	JSON.stringify() : string -> json
































