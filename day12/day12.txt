깊은 복사
	-객체의 깊은 복사는 복사본의 속성이 복사본이 만들어진 원본 객체와 같은 참조(메모리 내의 같은 값을 가리킴)을
	공유하지 않는 복사이다. 따라서 원본이나 복사본을 변경할 때, 다른 객체가 변경되지 않는 것을 보장한다.
	결론을 내리자면 Spread Operator로 복사한 객체(배열)은 1depth의 값에서만 깊은 복사가 실행된다.
	만약 완전한 깊은 복사를 구현하고 싶다면, for문을 이용한 재귀적인 깊은 복사를 구현하거나
	JSON으로 stringify를 시킨 후 다시 parse하는 과정을 거치면 완전한 참조가 끊기는 깊은 복사가 구현된다.

구조분해할당(Destructuring)
	-디스크럭처링은 구조화된 배열또는 객체를 비구조화, 파괴하여 개발적인 변수에 할당하는 것이다. 배열 또는 객체 리터럴에서
	필요한 값만 추출하여 변수에 할당하거나 반환할 때 유용한 문법이다.

에러 핸들링(Error Handling)
	1) 컴파일 오류
		- 실행할 수 없는 상태를 의미한다. 즉 빨간 줄이 코드에 들어가 있는 경우이다.
	2) 빌드 오류
		- 컴파일이 완료되어 만들어지면서 생기는 오류를 의미한다.
	3) 런타임 오류
		- 실행중일 때 한 번이라도 정상적으로 실행되었고, 사용자에 의해서 생긴 오류를 의미한다.

try~catch문
	try{
		오류(예외)가 발생할 수 있는 문장

	} catch(error){
		오류(예외) 발생 시 실행할 문장

	} finally {
		예외 발생 여부에 상관없이 무조건 실행할 문장
		catch로 잡지 못하는 오류들을 실행해야 할 때
		** 외부 장치와 연결했을 경우 다시 닫을 때 주로 사용한다.
	}



name
	- 에러 이름. 정의되지 않은 변수 때문에 발생한 에러라면 "ReferenceError"가 이름이 된다.

message
	- 에러 상세 내용을 담고 있는 문자 메시지
	표준은 아니지만, name과 message 이외에 대부분의 호스트 환경에서 지원하는 프로퍼티도 있다.

stack
	- 가장 널리 사용되는 비표준 프로퍼티 중 하나입니다.
	현재 호출 스택. 에러를 유발한 중첩 호출들의 순서 정보를 가진 문자열로 디버깅 목적으로 사용된다.





















