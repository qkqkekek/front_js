객체 (object란?)?
자료를 저장하고 처리하는 데이터의 기본 단위이다.
추상화하여 상태와 행위를 가지는 것이 객체이다.
자바스크립트는 객체 기반 스크립트 언어이며, 자바스크립트를 이루고 있는 모든 것이라고 해도 무방하다.
원시 타입 외에 데이터 타입은 모두 object이다

자바스크립트는 key와 value의 값으로 구성된 속성들의 집합이다.
key : 집합에서 특정한 값을 찾기 위해 다른 값들과 비교되는 값, 키는 중복이 있을 수 없다.
value : 키로 이름을 구별하고 해당 키 값으로 구성되어 잇다 (키와 값 한 쌍)

1. 객체의 생성
let user = new object() // "객체 생성자" 문법
let user = { } //  "객체 리터럴" 문법


2. 객체의 접근 방법
마침표 표기법
-img.src

대괄호 표기법
img["keyName"]



자바스크립트는 싱글쓰레드의 싱글컨커런트 언어이다. 이는 동시에 하나의 작업이나 하나의 코드 조각만
실행할 수 있는 것을 의미한다. 하나의 콜 스택을 가자며, 스택은 힙, 큐와 함께 V8엔진 내부에서
실행하는 자바스크립트 동시성 모델을 구성한다.

1. 콜스택(call stack)
콜스택은 힙에 저장된 개체의 주소값을 저장한다.

2. 힙(memory heap)
객체는 힙, 즉 대부분의 구조화 되지 않은 메모리 영역에 할당된다.
변수와 객체에 대한 모든 메모리 할당은 여기에서 발생한다.

3. 원시 데이터의 값
값 : 원시 타입 값 자체는 call stack에 저장된다.
변수 : 변수는 값이 저장된 call stack의 메모리의 주소를 참조한다.

4. 참초 데이터 값
값 : 참초 타입(객체, 배열, 함수, ....)은 memory heap에 저장된다.
참조값 : memory heap의 주소를 call stack에 저장한다.
변수 : 변수는 memory heap 주소가 저장된 call stack 메모리의 주소를 참조한다.

let과 const의 사용
let의 변경은 값의 변경이 아닌 메모리 주소의 변경(즉 재할당)이 가능함을 의미하므로 변수를 담고있는
객체의 주소값이 바뀌면 모든 값을 소실할 위험이 있다. 따라서 let 사용을 지양한다.

let myObject = {} // bad
const myObject = {}; /// good!!!!!!!!!!!!!!!!!!!



프로토타입(prototype)
객체 생성자 함수에 의해 생성되는 객체들이 공유하는 속성과 메소드를 저장하는 특수한 객체

this
프로퍼티에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
이 때 접근한 객체가 가지고 있는 할당된 필드의 주소값을 this 라는 변수에 자동으로 담긴다.











