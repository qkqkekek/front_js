2. 문장 구분
세미클론 ; 으로 문장과 문장을 구분한다
한줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다.

i = i + 1;
i = j + 1
k = k + 1; m = m + 1;
n = n + 1 p = p + 1 (x)

3. 주석
한 줄 주석 : //
범위 주석 : /* */

4. 데이터 타입 (typeof()) === 원시타입
숫자 타입(number) : 42, 3.14
논리 타입(bool) : true, false
뮨자열 타입(string) : "안녕", "하세요", "35", 'a', "a"
객체 레퍼런스 타입(object) :  object, array, Math, Date,
undefined : 타입이 정해지지 않은 것을 의미
null : 값이 정해지지 않는 것을 의미


5. 변수
var 키워드 : 함수의 영역만 영역으로 판단
let 키워드 : 모든 영역을 영역으로 판단 (ES6)


6. 상수
const 키워드 : 값을 변경시킬 수 없다.

6-1 상수를 사용하는 이유
의미 없는 값에 의미를 부여하기 위해
오타 방지
주소값의 변경을 방지하기 위해서(object)

7. 지역변수와 전역변수
변수의 사용 범위(scope)에 따라서 전역변수(global)와 지역변수(local)로 나뉜다
전역 변수 : 영역 밖에서 선언된 변수
지역 변수 : 영역 안에서 선언된 변수

8. 호이스팅
자바스크립트 함수가 실행되기 전에 함수 내부에 필요한 변수 값을 모아 유효 범위의 최상단에 선언하는 것을 말한다
다시말해, 함수가 실행되기 전에 자바스크립트 paser가 함수 실행전에 해당 함수를 흝는 과정에서
함수 내(함수 블록{...}) 에서 존재하는 내용 중 함수가 실행에 필요한 값들은 모두 끌어올리는 것을 의미한다.



연산자

1. 최우선 연산자 ()
10 * 2 +2 = 22;
10 * (2+2) = 40;

2. 단항 연산자(항이 1개)
++ :  값이 1씩 증가
-- :  값이 1씩 감소


== 전위형 : 값이 호출되기 전에 먼저 연산한다. ++a
== 후위형 : 값이 호출되기 후에 먼저 연산한다. a++


! : 할당된 값을 부정하는 연산자
!ture : ture → false, 
!false " false → ture


3. 이항 연산자(항 2개)
3-1 산술 연산자
   +, -, *, /, %

3-2 누적 복합 연산자
  +=, -=, *=, /=
  data += 10;
  
  위에 코드 해석은
  data = data + 10;


4. 쉬프트 연산자
    a >> b
    [피연산자] >> 비트수


5. 관계 연산자
  == : 동등 비교, 값만 같은지 비교
  === : 일치 비교, 값과 자료형이 같은지 비교
  != : 부등 비교, 값만 같지 않은지 비교
  !== : 불일치 비교, 값과 자료형이 같지 않은지 비교
  >=, <= : 이상, 이하
  >, < : 초과, 미만


6. 논리 연산자
  || 논리합(or) : 둘 중 하나라도 true 면 true
  && 논리곱(and) : 둘 다 true 여야만 true


삼항 연산자
JavaScript에서 세 개의 피연산자를 받는 유일한 연산자
조건식이 하나일 때 사용하는 연산자

예제)
조건식 ? true : false
true ? 'true 일때 싱행하는 값' : 'false 일 때 실행하는 값';





















